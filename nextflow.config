
params {
    pgdspider_spid      = "$baseDir/assets/PED_GENEPOP.spid"

    publish_dir_mode    = 'link'
    outdir              = './results'
    tracedir            = "${params.outdir}/pipeline_info"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory          = '128.GB'
    max_cpus            = 32
    max_time            = '240.h'
}

process {
    executor = 'local'

    errorStrategy = { task.exitStatus in [104, 134, 137, 139, 140, 143] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withName: PLINK_SUBSET {
        publishDir = [
            path: { "${params.outdir}/plink_subset/${meta.individuals}_individuals/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{map,ped}"
        ]
    }

    withName: PED2GENEPOP {
        publishDir = [
            path: { "${params.outdir}/ped2genepop/${meta.individuals}_individuals/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt}"
        ]
    }

    withName: RLDNE {
        publishDir = [
            path: { "${params.outdir}/rldne/${meta.individuals}_individuals/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt}"
        ]
    }
}

profiles {
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    test {
        process.executor = 'slurm'
        process.queue = 'testing'
        max_time = '4.h'
    }
    slurm {
        // within this configuration, I will apply this to every process
        process.executor = 'slurm'
    }
}

executor {
    // for the local executor, I will set the maximum values of CPU and MEMORY
    $local {
        max_cpus = 4
        max_memory = '8 GB'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
